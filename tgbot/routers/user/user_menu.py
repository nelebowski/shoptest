# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.data.config import BOT_VERSION, get_desc
import math

from tgbot.database import Purchasesx
from tgbot.keyboards.inline_user import start_menu_finl, order_pay_method_finl
from tgbot.keyboards.inline_user_page import *
from tgbot.utils.const_functions import ded, del_message, convert_date, send_admins, ikb
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import upload_text, insert_tags, get_items_available
from tgbot.utils.text_functions import open_profile_user
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router(name=__name__)


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "buy_currency")
async def buy_currency_start(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</b>", reply_markup=buy_servers_swipe_fp(0))


@router.callback_query(F.data.startswith("servers_page:"))
async def buy_currency_page(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    page = int(call.data.split(":")[1])
    await call.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</b>", reply_markup=buy_servers_swipe_fp(page))


@router.callback_query(F.data.startswith("select_server:"))
async def buy_currency_server(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    server = int(call.data.split(":")[1])
    await state.update_data(buy_server=server)
    await state.set_state("buy_amount")
    kb = InlineKeyboardBuilder()
    kb.row(ikb("üîô –ù–∞–∑–∞–¥", data="buy_currency"))
    await call.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã</b>", reply_markup=kb.as_markup())


@router.message(StateFilter("buy_amount"))
async def buy_currency_amount(message: Message, bot: Bot, state: FSM, arSession: ARS):
    if not message.text.isdigit():
        return await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>")
    amount = int(message.text)
    await state.update_data(buy_amount=amount)
    await state.set_state("buy_account")
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞</b>")


@router.message(StateFilter("buy_account"))
async def buy_currency_account(message: Message, bot: Bot, state: FSM, arSession: ARS):
    data = await state.get_data()
    server = data['buy_server']
    amount = data['buy_amount']
    account = message.text
    pay_amount = amount
    stars_amount = math.ceil(pay_amount / 1.45)
    await state.update_data(buy_account=account, pay_amount=pay_amount)
    await state.set_state("order_pay")
    await message.answer(
        ded(f"""
            –í–∞—à –∑–∞–∫–∞–∑:
            –°–µ—Ä–≤–µ—Ä: {server}
            –°—á—ë—Ç: {account}
            –ö–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã: {amount}
            –ö –æ–ø–ª–∞—Ç–µ: {pay_amount}‚ÇΩ (~{stars_amount}‚≠ê)
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
        """),
        reply_markup=order_pay_method_finl(),
    )


@router.callback_query(F.data.startswith("order_pay:"), StateFilter("order_pay"))
async def order_pay_call(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    method = call.data.split(":")[1]
    await call.answer(f"–û–ø–ª–∞—Ç–∞ {method} –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", True)
    await call.message.edit_reply_markup()


@router.callback_query(F.data == "user_reviews")
async def user_reviews(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    await call.message.edit_text("<b>–û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>", reply_markup=start_menu_finl())


@router.callback_query(F.data == "support_chat")
async def support_chat_start(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.set_state("support_message")
    kb = InlineKeyboardBuilder()
    kb.row(ikb("üîô –ù–∞–∑–∞–¥", data="main_menu"))
    await call.message.edit_text("<b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É</b>", reply_markup=kb.as_markup())


@router.message(StateFilter("support_message"))
async def support_chat_message(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()
    await send_admins(
        bot,
        ded(f"""
            üÜò –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a> <code>{message.from_user.id}</code>
            {message.text}
        """),
    )
    await message.answer("<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.</b>", reply_markup=start_menu_finl())

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@router.message(F.text == "üéÅ –ö—É–ø–∏—Ç—å")
async def user_shop(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_categories = get_categories_items()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä</b>",
            reply_markup=prod_item_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>üéÅ –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await open_profile_user(bot, message.from_user.id)



# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
@router.message(Command(commands=['version']))
async def admin_version(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(f"<b>‚ùáÔ∏è –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: <code>{BOT_VERSION}</code></b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
@router.message(Command(commands=['dj_desc']))
async def admin_desc(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(get_desc(), disable_web_page_preview=True)


################################################################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@router.callback_query(F.data == "user_profile")
async def user_profile_return(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await del_message(call.message)
    await open_profile_user(bot, call.from_user.id)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@router.callback_query(F.data == "user_purchases")
async def user_purchases(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_purchases = Purchasesx.gets(user_id=call.from_user.id)
    get_purchases = get_purchases[-5:]

    if len(get_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        await del_message(call.message)

        for purchase in get_purchases:
            link_items = await upload_text(arSession, purchase.purchase_data)

            await call.message.answer(
                ded(f"""
                    <b>üßæ –ß–µ–∫: <code>#{purchase.purchase_receipt}</code></b>
                    ‚ñ™Ô∏è –¢–æ–≤–∞—Ä: <code>{purchase.purchase_position_name} | {purchase.purchase_count}—à—Ç | {int(purchase.purchase_price)}‚ÇΩ</code>
                    ‚ñ™Ô∏è –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{convert_date(purchase.purchase_unix)}</code>
                    ‚ñ™Ô∏è –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
                """)
            )

            await asyncio.sleep(0.2)

        await open_profile_user(bot, call.from_user.id)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –°—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data.startswith("user_available_swipe:"))
async def user_available_swipe(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    remover = int(call.data.split(":")[1])

    items_available = get_items_available()

    if remover >= len(items_available):
        remover = len(items_available) - 1
    if remover < 0:
        remover = 0

    await call.message.edit_text(
        items_available[remover],
        reply_markup=prod_available_swipe_fp(remover, len(items_available)),
    )
